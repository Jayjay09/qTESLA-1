# For more information about using CMake with Android Studio, read the
# documentation: https://d.android.com/studio/projects/add-native-code.html

# Sets the minimum version of CMake required to build the native library.

cmake_minimum_required(VERSION 3.6.1)


set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fopenmp -static-openmp")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp -static-openmp -O3")

#set(DCMAKE_CROSSCOMPILING "True")

# Creates and names a library, sets it as either STATIC
# or SHARED, and provides the relative paths to its source code.
# You can define multiple libraries, and CMake builds them for you.
# Gradle automatically packages shared libraries with your APK.

add_library( # Sets the name of the library.
        native-lib

        # Sets the library as a shared library.
        SHARED

        # Provides a relative path to your source file(s).
        native-lib.cpp
        consts.cpp
        gauss.cpp
        pack.cpp
        poly.cpp
        sample.cpp
        sign.cpp
        random/random.cpp
        sha3/fips202.cpp
        tests/cpucycles.cpp
        tests/rng.cpp
        tests/test_qtesla.cpp
        tests/Logger.cpp
        )

# Specifies a path to native header files.
include_directories(src/main/cpp/include/ C:/compile/${ANDROID_ABI}/include/)
link_directories(C:/compile/${ANDROID_ABI}/crypto/)

find_package(OpenMP)
if (OPENMP_FOUND)
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

# Searches for a specified prebuilt library and stores the path as a
# variable. Because CMake includes system libraries in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
        log-lib

        # Specifies the name of the NDK library that
        # you want CMake to locate.
        log)

# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in this
# build script, prebuilt third-party libraries, or system libraries.

target_link_libraries( # Specifies the target library.
        native-lib
        #C:/libcrypto.a
        #C:/libssl.a
        C:/compile/${ANDROID_ABI}/ssl/libssl_1_1.a
        C:/compile/${ANDROID_ABI}/crypto/libcrypto_1_1.a
        # Links the target library to the log library
        # included in the NDK.
        ${log-lib})